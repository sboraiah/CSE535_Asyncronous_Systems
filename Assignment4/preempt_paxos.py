# -*- generated by 1.0.12 -*-
import da
PatternExpr_321 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern324_'), da.pat.FreePattern(None)])
PatternExpr_328 = da.pat.FreePattern('a')
PatternExpr_356 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern359_'), da.pat.TuplePattern([da.pat.FreePattern('n2'), da.pat.FreePattern('v')])])
PatternExpr_387 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern390_'), da.pat.TuplePattern([da.pat.FreePattern('n2'), da.pat.FreePattern(None)])])
PatternExpr_423 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern426_'), da.pat.FreePattern(None)])
PatternExpr_430 = da.pat.FreePattern('a')
PatternExpr_475 = da.pat.TuplePattern([da.pat.ConstantPattern('preempt'), da.pat.FreePattern('n2')])
PatternExpr_511 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_516 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_559 = da.pat.TuplePattern([da.pat.ConstantPattern('prepare'), da.pat.FreePattern('n')])
PatternExpr_566 = da.pat.FreePattern('p')
PatternExpr_574 = da.pat.TuplePattern([da.pat.ConstantPattern('responded'), da.pat.FreePattern('n2'), da.pat.FreePattern(None)])
PatternExpr_604 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.FreePattern('n2'), da.pat.FreePattern(None)])
PatternExpr_632 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_658 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern(None)])
PatternExpr_699 = da.pat.TuplePattern([da.pat.ConstantPattern('accept'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_712 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.FreePattern('n2'), da.pat.FreePattern(None)])
PatternExpr_749 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_754 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_800 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_826 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.BoundPattern('_BoundPattern829_'), da.pat.BoundPattern('_BoundPattern830_')])
PatternExpr_833 = da.pat.FreePattern('a')
_config_object = {}
import sys
from random import randint
from numpy.random import choice
import copy
import time
TIMEOUT = 1

class Proposer(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ProposerReceivedEvent_0 = []
        self._ProposerReceivedEvent_1 = []
        self._ProposerReceivedEvent_2 = []
        self._ProposerReceivedEvent_3 = []
        self._ProposerReceivedEvent_4 = []
        self._ProposerReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_0', PatternExpr_321, sources=[PatternExpr_328], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_1', PatternExpr_356, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_2', PatternExpr_387, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_3', PatternExpr_423, sources=[PatternExpr_430], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_4', PatternExpr_475, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_5', PatternExpr_511, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, acceptors, monitor, tp, nLossRate, nDelay, nWaitTime, **rest_875):
        super().setup(acceptors=acceptors, monitor=monitor, tp=tp, nLossRate=nLossRate, nDelay=nDelay, nWaitTime=nWaitTime, **rest_875)
        self._state.acceptors = acceptors
        self._state.monitor = monitor
        self._state.tp = tp
        self._state.nLossRate = nLossRate
        self._state.nDelay = nDelay
        self._state.nWaitTime = nWaitTime
        self._state.n = None
        self._state.majority = self._state.acceptors

    def run(self):
        while (not PatternExpr_516.match_iter(self._ProposerReceivedEvent_5, SELF_ID=self._id)):
            self.to_consent()

    def Loss(self):
        modifiedmajority = set()
        majorityList = list(self._state.majority)
        draw = [int(choice((0, 1), 1, p=[self._state.nLossRate, (1 - self._state.nLossRate)], replace=False)) for i in range(len(self._state.majority))]
        for (i, j) in enumerate(draw):
            if (j == 1):
                modifiedmajority.add(majorityList[i])
        return modifiedmajority

    def to_consent(self):
        self._state.n = ((0, self._id) if (self._state.n == None) else ((self._state.n[0] + 1), self._id))
        modifiedmajority = self.Loss()
        nDelayInt = int(self._state.nDelay)
        delay = randint(0, nDelayInt)
        time.sleep(delay)
        self.send(('prepare', self._state.n), to=modifiedmajority)
        super()._label('_st_label_316', block=False)
        n2 = None

        def ExistentialOpExpr_473():
            nonlocal n2
            for (_, _, (_ConstantPattern490_, n2)) in self._ProposerReceivedEvent_4:
                if (_ConstantPattern490_ == 'preempt'):
                    if (n2 > self._state.n):
                        return True
            return False
        _st_label_316 = 0
        self._timer_start()
        while (_st_label_316 == 0):
            _st_label_316 += 1
            if (len({a for (_, (_, _, a), (_ConstantPattern339_, _BoundPattern341_, _)) in self._ProposerReceivedEvent_0 if (_ConstantPattern339_ == 'respond') if (_BoundPattern341_ == self._state.n)}) > (len(self._state.acceptors) / 2)):
                v = self.anyof(({v for (_, _, (_ConstantPattern375_, _BoundPattern377_, (n2, v))) in self._ProposerReceivedEvent_1 if (_ConstantPattern375_ == 'respond') if (_BoundPattern377_ == self._state.n) if (n2 == max({n2 for (_, _, (_ConstantPattern404_, _BoundPattern406_, (n2, _))) in self._ProposerReceivedEvent_2 if (_ConstantPattern404_ == 'respond') if (_BoundPattern406_ == self._state.n)}))} or {randint(1, 100)}))
                responded = {a for (_, (_, _, a), (_ConstantPattern441_, _BoundPattern443_, _)) in self._ProposerReceivedEvent_3 if (_ConstantPattern441_ == 'respond') if (_BoundPattern443_ == self._state.n)}
                self.send(('accept', self._state.n, v), to=responded)
                self.send(('PropsedValue', self._state.n, v), to=self._state.monitor)
                self.debug('### chose', self._state.n, v)
                time.sleep(self._state.nWaitTime)
                _st_label_316 += 1
            elif ExistentialOpExpr_473():
                return
                _st_label_316 += 1
            elif self._timer_expired:
                time.sleep(self._state.nWaitTime)
                _st_label_316 += 1
            else:
                super()._label('_st_label_316', block=True, timeout=self._state.tp)
                _st_label_316 -= 1

    def anyof(self, s):
        return (next(iter(s)) if s else None)

class Acceptor(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._AcceptorReceivedEvent_1 = []
        self._AcceptorSentEvent_2 = []
        self._AcceptorSentEvent_3 = []
        self._AcceptorSentEvent_4 = []
        self._AcceptorSentEvent_6 = []
        self._AcceptorReceivedEvent_7 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_0', PatternExpr_559, sources=[PatternExpr_566], destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_558]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_1', PatternExpr_574, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_2', PatternExpr_604, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_3', PatternExpr_632, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_4', PatternExpr_658, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_5', PatternExpr_699, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_698]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_6', PatternExpr_712, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_7', PatternExpr_749, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, learners, monitor, nDelay, **rest_875):
        super().setup(learners=learners, monitor=monitor, nDelay=nDelay, **rest_875)
        self._state.learners = learners
        self._state.monitor = monitor
        self._state.nDelay = nDelay
        pass

    def run(self):
        super()._label('_st_label_746', block=False)
        _st_label_746 = 0
        while (_st_label_746 == 0):
            _st_label_746 += 1
            if PatternExpr_754.match_iter(self._AcceptorReceivedEvent_7, SELF_ID=self._id):
                _st_label_746 += 1
            else:
                super()._label('_st_label_746', block=True)
                _st_label_746 -= 1

    def anyof(self, s):
        "return any element of set s if s is not empty or 'None' otherwise"
        return (next(iter(s)) if s else None)

    def _Acceptor_handler_558(self, n, p):
        n2 = self.anyof({n2 for (_, _, (_ConstantPattern590_, n2, _)) in self._AcceptorReceivedEvent_1 if (_ConstantPattern590_ == 'responded') if (n2 > n)})
        n2 = None

        def UniversalOpExpr_602():
            nonlocal n2
            for (_, _, (_ConstantPattern619_, n2, _)) in self._AcceptorSentEvent_2:
                if (_ConstantPattern619_ == 'respond'):
                    if (not (n > n2)):
                        return False
            return True
        if UniversalOpExpr_602():
            maxprop = self.anyof({(n, v) for (_, _, (_ConstantPattern648_, n, v)) in self._AcceptorSentEvent_3 if (_ConstantPattern648_ == 'accepted') if (n == max({n for (_, _, (_ConstantPattern673_, n, _)) in self._AcceptorSentEvent_4 if (_ConstantPattern673_ == 'accepted')}))})
            self.send(('respond', n, maxprop), to=p)
        else:
            self.send(('preempt', n2), to=p)
    _Acceptor_handler_558._labels = None
    _Acceptor_handler_558._notlabels = None

    def _Acceptor_handler_698(self, n, v):
        n2 = None

        def ExistentialOpExpr_710():
            nonlocal n2
            for (_, _, (_ConstantPattern728_, n2, _)) in self._AcceptorSentEvent_6:
                if (_ConstantPattern728_ == 'respond'):
                    if (n2 > n):
                        return True
            return False
        if (not ExistentialOpExpr_710()):
            self.send(('accepted', n, v), to=self._state.learners)
        else:
            pass
    _Acceptor_handler_698._labels = None
    _Acceptor_handler_698._notlabels = None

class Learner(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._LearnerReceivedEvent_0 = []
        self._LearnerReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_LearnerReceivedEvent_0', PatternExpr_800, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LearnerReceivedEvent_1', PatternExpr_826, sources=[PatternExpr_833], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, acceptors, monitor, tl, **rest_875):
        super().setup(acceptors=acceptors, monitor=monitor, tl=tl, **rest_875)
        self._state.acceptors = acceptors
        self._state.monitor = monitor
        self._state.tl = tl
        pass

    def run(self):
        self.learn()
        self.send(('learned',), to=self.nodeof(self._id))

    def learn(self):
        super()._label('_st_label_797', block=False)
        v = n = a = None

        def ExistentialOpExpr_798():
            nonlocal v, n, a
            for (_, _, (_ConstantPattern817_, n, v)) in self._LearnerReceivedEvent_0:
                if (_ConstantPattern817_ == 'accepted'):
                    if (len({a for (_, (_, _, a), (_ConstantPattern844_, _BoundPattern846_, _BoundPattern847_)) in self._LearnerReceivedEvent_1 if (_ConstantPattern844_ == 'accepted') if (_BoundPattern846_ == n) if (_BoundPattern847_ == v)}) > (len(self._state.acceptors) / 2)):
                        return True
            return False
        _st_label_797 = 0
        self._timer_start()
        while (_st_label_797 == 0):
            _st_label_797 += 1
            if ExistentialOpExpr_798():
                self.send(('learned', n, v), to=self._state.monitor)
                _st_label_797 += 1
            elif self._timer_expired:
                self.output('failed learning anything')
                _st_label_797 += 1
            else:
                super()._label('_st_label_797', block=True, timeout=self._state.tl)
                _st_label_797 -= 1
