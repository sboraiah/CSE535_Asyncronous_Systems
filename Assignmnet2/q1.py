# -*- generated by 1.0.12 -*-
import da
PatternExpr_250 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern254_')])
PatternExpr_309 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_341 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_474 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_479 = da.pat.BoundPattern('_BoundPattern481_')
PatternExpr_482 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern488_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_564 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern567_')])
PatternExpr_570 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern580_')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
import sys
import random
import time
import timeit

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._PReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_250, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_309, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_308]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_341, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_340]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_3', PatternExpr_474, sources=[PatternExpr_479], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ts3, s, nrequests, **rest_586):
        super().setup(ts3=ts3, s=s, nrequests=nrequests, **rest_586)
        self._state.ts3 = ts3
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.q = set()

    def run(self):

        def task():
            self.output('in cs')
        clock = []
        for i in range(self._state.nrequests):
            clock.append(i)
        t1 = time.process_time()
        t11 = timeit.default_timer()
        for i in range(self._state.nrequests):
            t = random.choice(clock)
            clock.remove(t)
            self.request(task, t)
            self.cs(task, t)
            self.release(task, t)
        t2 = time.process_time()
        t22 = timeit.default_timer()
        self.send(('performance', (t2 - t1), (t22 - t11), self._id), to=self._state.ts3)
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_471', block=False)
        _st_label_471 = 0
        while (_st_label_471 == 0):
            _st_label_471 += 1
            if PatternExpr_482.match_iter(self._PReceivedEvent_3, _BoundPattern488_=self.parent(), SELF_ID=self._id):
                _st_label_471 += 1
            else:
                super()._label('_st_label_471', block=True)
                _st_label_471 -= 1
        self.output('terminating')

    def request(self, task, c):
        super()._label('t', block=False)
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))

    def cs(self, task, c):
        super()._label('q', block=False)
        p = c2 = None

        def UniversalOpExpr_217():
            nonlocal p, c2
            for (_ConstantPattern221_, c2, p) in self._state.q:
                if (_ConstantPattern221_ == 'request'):
                    if (not (((c2, p) == (c, self._id)) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_243():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_248(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern265_, c2, _BoundPattern268_)) in self._PReceivedEvent_0:
                        if (_ConstantPattern265_ == 'ack'):
                            if (_BoundPattern268_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_248(p=p)):
                    return False
            return True
        _st_label_215 = 0
        self._timer_start()
        while (_st_label_215 == 0):
            _st_label_215 += 1
            if (UniversalOpExpr_217() and UniversalOpExpr_243()):
                task()
                self.output(self._id, self.logical_clock())
                _st_label_215 += 1
            elif self._timer_expired:
                self.send(('deadlock', c, self._id), to=self._state.ts3)
                _st_label_215 += 1
            else:
                super()._label('q', block=True, timeout=1)
                _st_label_215 -= 1

    def release(self, task, c):
        super()._label('l', block=False)
        self._state.q.remove(('request', c, self._id))
        self.send(('release', self.logical_clock(), self._id), to=self._state.s)

    def _P_handler_308(self, c2, p):
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
        self.output('ack_sent', ('ack', self.logical_clock(), p))
    _P_handler_308._labels = None
    _P_handler_308._notlabels = None

    def _P_handler_340(self, p):
        for x in {('request', c, p) for (_ConstantPattern357_, c, _BoundPattern360_) in self._state.q if (_ConstantPattern357_ == 'request') if (_BoundPattern360_ == p)}:
            self._state.q.remove(x)
            break
    _P_handler_340._labels = None
    _P_handler_340._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_564, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ps = self.new(P, num=nprocs)
        for p in ps:
            self._setup(p, ((ps - {p}), nrequests))
        self._start(ps)
        super()._label('_st_label_556', block=False)
        p = None

        def UniversalOpExpr_557():
            nonlocal p
            for p in ps:
                if (not PatternExpr_570.match_iter(self._Node_ReceivedEvent_0, _BoundPattern580_=p)):
                    return False
            return True
        _st_label_556 = 0
        while (_st_label_556 == 0):
            _st_label_556 += 1
            if UniversalOpExpr_557():
                _st_label_556 += 1
            else:
                super()._label('_st_label_556', block=True)
                _st_label_556 -= 1
        self.send(('done',), to=ps)
