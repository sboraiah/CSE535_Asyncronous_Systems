import sys
import random
config(channel is fifo, clock is lamport)

#process creation and mapping it to requests 
class P(process):
    def setup(s:set, nrequests:int):  # s is set of all other processes
        self.q = set()

    def request(task, c):
        -- t
        #Rule 1
        send(('request', c, self), to= s)
        q.add(('request', c, self))
        #output('request_sent', ('request', c, self))
        #Rule 5(a) and 5(b) verified by process, P locally
        await(each(('request', c2, p) in q,has= (c2, p)==(c, self) or (c, self) < (c2, p)) and each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))
        output(c, c2, self, p)

    def cs(task, c):
        -- q
        task()
        output(self, logical_clock())

            
    def release(task, c):
        -- l
        #Rule 3, The asumption here is to remove any-one request
        #output('release_resource', ('request', logical_clock(), self))
        q.remove(('request', c, self))  
        send(('release', logical_clock(), self), to= s)

    def receive(msg= ('request', c2, p)):
        #Rule 2
        q.add(('request', c2, p))
        #output('request_received', ('request', logical_clock(), p))
        send(('ack', logical_clock(), self), to= p)
        #output('ack_sent',('ack', logical_clock(), p))

    def receive(msg= ('release', _, p)):
        #Rule 4, removal of any-one request from process after receing release message from process, P
        for x in setof(('request', c, p), ('request', c, _p) in q):
            #output('request_removed', x)
            q.remove(x)
            break



    def run():
        def task():
            output('in cs')
        clock = []
        for i in range(nrequests):
            clock.append(i)
        for i in range(nrequests):
            t = random.choice(clock)
            clock.remove(t)
            request(task, t)
            cs(task, t)
            rec=release(task, t)
            if (rec==5):
                break
        send(('done', self), to= parent())
        await(received(('done',), from_=parent()))
        output('terminating')

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    ps = new(P, num=nprocs)
    for p in ps: setup(p, (ps-{p}, nrequests))
    start(ps)
    await(each(p in ps, has=received(('done', p))))
    send(('done',), to=ps)

# This is an executable specification of the algorithm described in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# This code includes setup and termination for serving a given number of
# requests per process.

# All labels are not needed,
# leaving 14 or 15 lines total for the algorithm body and message handlers.
