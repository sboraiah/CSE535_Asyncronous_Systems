# -*- generated by 1.0.12 -*-
import da
PatternExpr_244 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern248_')])
PatternExpr_304 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_330 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_425 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_430 = da.pat.BoundPattern('_BoundPattern432_')
PatternExpr_433 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern439_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_515 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern518_')])
PatternExpr_521 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern531_')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
import sys
import time
import timeit

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._PReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_244, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_304, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_303]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_330, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_329]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_3', PatternExpr_425, sources=[PatternExpr_430], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ts1, s, nrequests, **rest_537):
        super().setup(ts1=ts1, s=s, nrequests=nrequests, **rest_537)
        self._state.ts1 = ts1
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.q = set()

    def run(self):

        def task():
            self.output('in cs')
        t1 = time.process_time()
        t11 = timeit.default_timer()
        for i in range(self._state.nrequests):
            self.mutex(task)
        t2 = time.process_time()
        t22 = timeit.default_timer()
        self.send(('performance', (t2 - t1), (t22 - t11), self._id), to=self._state.ts1)
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_422', block=False)
        _st_label_422 = 0
        while (_st_label_422 == 0):
            _st_label_422 += 1
            if PatternExpr_433.match_iter(self._PReceivedEvent_3, _BoundPattern439_=self.parent(), SELF_ID=self._id):
                _st_label_422 += 1
            else:
                super()._label('_st_label_422', block=True)
                _st_label_422 -= 1
        self.output('terminating')

    def mutex(self, task):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))
        super()._label('_st_label_209', block=False)
        p = c2 = None

        def UniversalOpExpr_211():
            nonlocal p, c2
            for (_ConstantPattern215_, c2, p) in self._state.q:
                if (_ConstantPattern215_ == 'request'):
                    if (not (((c2, p) == (c, self._id)) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_237():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_242(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern259_, c2, _BoundPattern262_)) in self._PReceivedEvent_0:
                        if (_ConstantPattern259_ == 'ack'):
                            if (_BoundPattern262_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_242(p=p)):
                    return False
            return True
        _st_label_209 = 0
        while (_st_label_209 == 0):
            _st_label_209 += 1
            if (UniversalOpExpr_211() and UniversalOpExpr_237()):
                _st_label_209 += 1
            else:
                super()._label('_st_label_209', block=True)
                _st_label_209 -= 1
        super()._label('critical_section', block=False)
        self.send(('cs', 'in', c, self._id), to=self._state.ts1)
        task()
        self.send(('cs', 'out', c, self._id), to=self._state.ts1)
        super()._label('release', block=False)
        self._state.q.remove(('request', c, self._id))
        self.send(('release', self.logical_clock(), self._id), to=self._state.s)

    def _P_handler_303(self, c2, p):
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _P_handler_303._labels = None
    _P_handler_303._notlabels = None

    def _P_handler_329(self, p):
        for x in {('request', c, p) for (_ConstantPattern346_, c, _BoundPattern349_) in self._state.q if (_ConstantPattern346_ == 'request') if (_BoundPattern349_ == p)}:
            self._state.q.remove(x)
            break
    _P_handler_329._labels = None
    _P_handler_329._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_515, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ps = self.new(P, num=nprocs)
        for p in ps:
            self._setup(p, ((ps - {p}), nrequests))
        self._start(ps)
        super()._label('_st_label_507', block=False)
        p = None

        def UniversalOpExpr_508():
            nonlocal p
            for p in ps:
                if (not PatternExpr_521.match_iter(self._Node_ReceivedEvent_0, _BoundPattern531_=p)):
                    return False
            return True
        _st_label_507 = 0
        while (_st_label_507 == 0):
            _st_label_507 += 1
            if UniversalOpExpr_508():
                _st_label_507 += 1
            else:
                super()._label('_st_label_507', block=True)
                _st_label_507 -= 1
        self.send(('done',), to=ps)
