# -*- generated by 1.0.12 -*-
import da
PatternExpr_237 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern241_')])
PatternExpr_297 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_323 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_427 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_432 = da.pat.BoundPattern('_BoundPattern434_')
PatternExpr_435 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern441_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_517 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern520_')])
PatternExpr_523 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern533_')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
import sys
import random

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._PReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_237, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_297, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_296]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_323, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_322]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_3', PatternExpr_427, sources=[PatternExpr_432], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, **rest_539):
        super().setup(s=s, nrequests=nrequests, **rest_539)
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.q = set()

    def run(self):

        def task():
            self.output('in cs')
        clock = []
        for i in range(self._state.nrequests):
            clock.append(i)
        for i in range(self._state.nrequests):
            t = random.choice(clock)
            clock.remove(t)
            self.request(task, t)
            self.cs(task, t)
            rec = self.release(task, t)
            if (rec == 5):
                break
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_424', block=False)
        _st_label_424 = 0
        while (_st_label_424 == 0):
            _st_label_424 += 1
            if PatternExpr_435.match_iter(self._PReceivedEvent_3, _BoundPattern441_=self.parent(), SELF_ID=self._id):
                _st_label_424 += 1
            else:
                super()._label('_st_label_424', block=True)
                _st_label_424 -= 1
        self.output('terminating')

    def request(self, task, c):
        super()._label('t', block=False)
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))
        super()._label('_st_label_202', block=False)
        p = c2 = None

        def UniversalOpExpr_204():
            nonlocal p, c2
            for (_ConstantPattern208_, c2, p) in self._state.q:
                if (_ConstantPattern208_ == 'request'):
                    if (not (((c2, p) == (c, self._id)) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_230():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_235(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern252_, c2, _BoundPattern255_)) in self._PReceivedEvent_0:
                        if (_ConstantPattern252_ == 'ack'):
                            if (_BoundPattern255_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_235(p=p)):
                    return False
            return True
        _st_label_202 = 0
        while (_st_label_202 == 0):
            _st_label_202 += 1
            if (UniversalOpExpr_204() and UniversalOpExpr_230()):
                _st_label_202 += 1
            else:
                super()._label('_st_label_202', block=True)
                _st_label_202 -= 1
        self.output(c, c2, self._id, p)

    def cs(self, task, c):
        super()._label('q', block=False)
        task()
        self.output(self._id, self.logical_clock())

    def release(self, task, c):
        super()._label('l', block=False)
        self._state.q.remove(('request', c, self._id))
        self.send(('release', self.logical_clock(), self._id), to=self._state.s)

    def _P_handler_296(self, c2, p):
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _P_handler_296._labels = None
    _P_handler_296._notlabels = None

    def _P_handler_322(self, p):
        for x in {('request', c, p) for (_ConstantPattern339_, c, _BoundPattern342_) in self._state.q if (_ConstantPattern339_ == 'request') if (_BoundPattern342_ == p)}:
            self._state.q.remove(x)
            break
    _P_handler_322._labels = None
    _P_handler_322._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_517, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ps = self.new(P, num=nprocs)
        for p in ps:
            self._setup(p, ((ps - {p}), nrequests))
        self._start(ps)
        super()._label('_st_label_509', block=False)
        p = None

        def UniversalOpExpr_510():
            nonlocal p
            for p in ps:
                if (not PatternExpr_523.match_iter(self._Node_ReceivedEvent_0, _BoundPattern533_=p)):
                    return False
            return True
        _st_label_509 = 0
        while (_st_label_509 == 0):
            _st_label_509 += 1
            if UniversalOpExpr_510():
                _st_label_509 += 1
            else:
                super()._label('_st_label_509', block=True)
                _st_label_509 -= 1
        self.send(('done',), to=ps)
