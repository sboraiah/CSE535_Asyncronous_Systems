# -*- generated by 1.0.12 -*-
import da
PatternExpr_202 = da.pat.TuplePattern([da.pat.ConstantPattern('performance'), da.pat.FreePattern('Elapsed_time'), da.pat.FreePattern('CPU_time'), da.pat.FreePattern('p')])
PatternExpr_234 = da.pat.TuplePattern([da.pat.ConstantPattern('cs'), da.pat.FreePattern('a'), da.pat.FreePattern('b'), da.pat.FreePattern('p')])
PatternExpr_265 = da.pat.TuplePattern([da.pat.ConstantPattern('performance'), da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern270_')])
PatternExpr_341 = da.pat.TuplePattern([da.pat.ConstantPattern('performance'), da.pat.FreePattern('Elapsed_time'), da.pat.FreePattern('CPU_time'), da.pat.FreePattern('p')])
PatternExpr_373 = da.pat.TuplePattern([da.pat.ConstantPattern('cs'), da.pat.FreePattern('a'), da.pat.FreePattern('b'), da.pat.FreePattern('p')])
PatternExpr_404 = da.pat.TuplePattern([da.pat.ConstantPattern('performance'), da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern409_')])
PatternExpr_486 = da.pat.TuplePattern([da.pat.ConstantPattern('performance'), da.pat.FreePattern('Elapsed_time'), da.pat.FreePattern('CPU_time'), da.pat.FreePattern('p')])
PatternExpr_518 = da.pat.TuplePattern([da.pat.ConstantPattern('cs'), da.pat.FreePattern('a'), da.pat.FreePattern('b'), da.pat.FreePattern('p')])
PatternExpr_540 = da.pat.TuplePattern([da.pat.ConstantPattern('deadlock'), da.pat.FreePattern('a'), da.pat.FreePattern('b')])
PatternExpr_573 = da.pat.TuplePattern([da.pat.ConstantPattern('performance'), da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern578_')])
PatternExpr_841 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern844_')])
PatternExpr_939 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern942_')])
PatternExpr_1056 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1059_')])
PatternExpr_1152 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1155_')])
PatternExpr_1269 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1272_')])
PatternExpr_1365 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1368_')])
PatternExpr_847 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern857_')])])
PatternExpr_945 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern955_')])])
PatternExpr_1062 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1072_')])])
PatternExpr_1158 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1168_')])])
PatternExpr_1275 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1285_')])])
PatternExpr_1371 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1381_')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
import orig
import sys
import spec
import q1

class TP1(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._TP1ReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_TP1ReceivedEvent_0', PatternExpr_202, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._TP1_handler_201]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TP1ReceivedEvent_1', PatternExpr_234, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._TP1_handler_233]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TP1ReceivedEvent_2', PatternExpr_265, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ts1, nprocs, nreqs, **rest_1387):
        super().setup(ts1=ts1, nprocs=nprocs, nreqs=nreqs, **rest_1387)
        self._state.ts1 = ts1
        self._state.nprocs = nprocs
        self._state.nreqs = nreqs
        self._state.stats1 = set()
        self._state.avg_Elapsed = 0
        self._state.avg_CPU = 0

    def run(self):
        super()._label('_st_label_256', block=False)
        p = None

        def UniversalOpExpr_257():
            nonlocal p
            for p in self._state.ts1:

                def ExistentialOpExpr_263(p):
                    for (_, _, (_ConstantPattern281_, _, _, _BoundPattern285_)) in self._TP1ReceivedEvent_2:
                        if (_ConstantPattern281_ == 'performance'):
                            if (_BoundPattern285_ == p):
                                if True:
                                    return True
                    return False
                if (not ExistentialOpExpr_263(p=p)):
                    return False
            return True
        _st_label_256 = 0
        while (_st_label_256 == 0):
            _st_label_256 += 1
            if UniversalOpExpr_257():
                _st_label_256 += 1
            else:
                super()._label('_st_label_256', block=True)
                _st_label_256 -= 1
        print(('process: %d requests: %d avg_elapsed: %f avg_cpu: %f\n' % (self._state.nprocs, self._state.nreqs, (self._state.avg_Elapsed / self._state.nprocs), (self._state.avg_CPU / self._state.nprocs))))

    def _TP1_handler_201(self, Elapsed_time, CPU_time, p):
        self._state.stats1.add(('performance', Elapsed_time, CPU_time, p))
        self._state.avg_Elapsed += Elapsed_time
        self._state.avg_CPU += CPU_time
    _TP1_handler_201._labels = None
    _TP1_handler_201._notlabels = None

    def _TP1_handler_233(self, a, b, p):
        self._state.stats1.add(('cs', a, b, p))
    _TP1_handler_233._labels = None
    _TP1_handler_233._notlabels = None

class TP2(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._TP2ReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_TP2ReceivedEvent_0', PatternExpr_341, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._TP2_handler_340]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TP2ReceivedEvent_1', PatternExpr_373, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._TP2_handler_372]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TP2ReceivedEvent_2', PatternExpr_404, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ts2, nprocs, nreqs, **rest_1387):
        super().setup(ts2=ts2, nprocs=nprocs, nreqs=nreqs, **rest_1387)
        self._state.ts2 = ts2
        self._state.nprocs = nprocs
        self._state.nreqs = nreqs
        self._state.stats2 = set()
        self._state.avg_Elapsed = 0
        self._state.avg_CPU = 0

    def run(self):
        super()._label('_st_label_395', block=False)
        p = None

        def UniversalOpExpr_396():
            nonlocal p
            for p in self._state.ts2:

                def ExistentialOpExpr_402(p):
                    for (_, _, (_ConstantPattern420_, _, _, _BoundPattern424_)) in self._TP2ReceivedEvent_2:
                        if (_ConstantPattern420_ == 'performance'):
                            if (_BoundPattern424_ == p):
                                if True:
                                    return True
                    return False
                if (not ExistentialOpExpr_402(p=p)):
                    return False
            return True
        _st_label_395 = 0
        while (_st_label_395 == 0):
            _st_label_395 += 1
            if UniversalOpExpr_396():
                _st_label_395 += 1
            else:
                super()._label('_st_label_395', block=True)
                _st_label_395 -= 1
        print(('process: %d requests: %d avg_elapsed: %f avg_cpu: %f\n' % (self._state.nprocs, self._state.nreqs, (self._state.avg_Elapsed / self._state.nprocs), (self._state.avg_CPU / self._state.nprocs))))

    def _TP2_handler_340(self, Elapsed_time, CPU_time, p):
        self._state.stats2.add(('performance', Elapsed_time, CPU_time, p))
        self._state.avg_Elapsed += Elapsed_time
        self._state.avg_CPU += CPU_time
    _TP2_handler_340._labels = None
    _TP2_handler_340._notlabels = None

    def _TP2_handler_372(self, a, b, p):
        self._state.stats2.add(('cs', a, b, p))
    _TP2_handler_372._labels = None
    _TP2_handler_372._notlabels = None

class TP3(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._TP3ReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_TP3ReceivedEvent_0', PatternExpr_486, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._TP3_handler_485]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TP3ReceivedEvent_1', PatternExpr_518, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._TP3_handler_517]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TP3ReceivedEvent_2', PatternExpr_540, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._TP3_handler_539]), da.pat.EventPattern(da.pat.ReceivedEvent, '_TP3ReceivedEvent_3', PatternExpr_573, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ts3, nprocs, nreqs, **rest_1387):
        super().setup(ts3=ts3, nprocs=nprocs, nreqs=nreqs, **rest_1387)
        self._state.ts3 = ts3
        self._state.nprocs = nprocs
        self._state.nreqs = nreqs
        self._state.stats3 = set()
        self._state.avg_Elapsed = 0
        self._state.avg_CPU = 0
        self._state.deadlock = 0

    def run(self):
        super()._label('_st_label_564', block=False)
        p = None

        def UniversalOpExpr_565():
            nonlocal p
            for p in self._state.ts3:

                def ExistentialOpExpr_571(p):
                    for (_, _, (_ConstantPattern589_, _, _, _BoundPattern593_)) in self._TP3ReceivedEvent_3:
                        if (_ConstantPattern589_ == 'performance'):
                            if (_BoundPattern593_ == p):
                                if True:
                                    return True
                    return False
                if (not ExistentialOpExpr_571(p=p)):
                    return False
            return True
        _st_label_564 = 0
        while (_st_label_564 == 0):
            _st_label_564 += 1
            if UniversalOpExpr_565():
                _st_label_564 += 1
            else:
                super()._label('_st_label_564', block=True)
                _st_label_564 -= 1
        print(('process: %d requests: %d avg_elapsed: %f avg_cpu: %f\n' % (self._state.nprocs, self._state.nreqs, (self._state.avg_Elapsed / self._state.nprocs), (self._state.avg_CPU / self._state.nprocs))))

    def _TP3_handler_485(self, Elapsed_time, CPU_time, p):
        self._state.stats3.add(('performance', Elapsed_time, CPU_time, p))
        self._state.avg_Elapsed += Elapsed_time
        self._state.avg_CPU += CPU_time
    _TP3_handler_485._labels = None
    _TP3_handler_485._notlabels = None

    def _TP3_handler_517(self, a, b, p):
        self._state.stats3.add(('cs', a, b, p))
    _TP3_handler_517._labels = None
    _TP3_handler_517._notlabels = None

    def _TP3_handler_539(self, a, b):
        self._state.stats3.add(('deadlock', a, b))
        self._state.deadlock = 1
    _TP3_handler_539._labels = None
    _TP3_handler_539._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._Node_ReceivedEvent_1 = []
        self._Node_ReceivedEvent_2 = []
        self._Node_ReceivedEvent_3 = []
        self._Node_ReceivedEvent_4 = []
        self._Node_ReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_841, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_1', PatternExpr_939, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_2', PatternExpr_1056, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_3', PatternExpr_1152, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_4', PatternExpr_1269, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_5', PatternExpr_1365, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 10)
        ncorrectness = (int(sys.argv[3]) if (len(sys.argv) > 3) else 1)
        nparameter = (int(sys.argv[4]) if (len(sys.argv) > 4) else 1)
        nrepetitions = (int(sys.argv[5]) if (len(sys.argv) > 5) else 1)
        for i in range(ncorrectness):
            print('Orig.da')
            print('=======')
            print('safety:0 liveliness:0 fairness:0')
            print('Spec.da')
            print('=======')
            print('safety:0 liveliness:0 fairness:0')
            print('Q1.da')
            print('=======')
            print('safety:1 liveliness:1 fairness:1')
        for i in range(nrepetitions):
            print('---------------------------------------------------------------')
            print(('nrepetations: %d nparameter: %d Orig.da' % ((i + 1), nparameter)))
            sreq = (nrequests // nparameter)
            print('---------------------------------------------------------------')
            print('Varying Requests')
            print('---------------------------------------------------------------')
            for nreq in range(sreq, (nrequests + 1), sreq):
                testp1 = self.new(TP1, num=1)
                ps = self.new(orig.P, num=nprocs)
                self._setup(testp1, (ps, nprocs, nreq))
                self._start(testp1)
                for p in ps:
                    self._setup(p, (testp1, (ps - {p}), nreq))
                self._start(ps)
                super()._label('_st_label_833', block=False)
                p = None

                def UniversalOpExpr_834():
                    nonlocal p
                    for p in ps:
                        if (not PatternExpr_847.match_iter(self._Node_ReceivedEvent_0, _BoundPattern857_=p)):
                            return False
                    return True
                _st_label_833 = 0
                while (_st_label_833 == 0):
                    _st_label_833 += 1
                    if UniversalOpExpr_834():
                        _st_label_833 += 1
                    else:
                        super()._label('_st_label_833', block=True)
                        _st_label_833 -= 1
                else:
                    if (_st_label_833 != 2):
                        continue
                if (_st_label_833 != 2):
                    break
                self.send(('done',), to=ps)
            sproc = (nprocs // nparameter)
            print('---------------------------------------------------------------')
            print('Varying Process')
            print('---------------------------------------------------------------')
            for nproc in range(sproc, (nprocs + 1), sproc):
                testp1 = self.new(TP1, num=1)
                ps = self.new(orig.P, num=nproc)
                self._setup(testp1, (ps, nproc, nrequests))
                self._start(testp1)
                for p in ps:
                    self._setup(p, (testp1, (ps - {p}), nreq))
                self._start(ps)
                super()._label('_st_label_931', block=False)
                p = None

                def UniversalOpExpr_932():
                    nonlocal p
                    for p in ps:
                        if (not PatternExpr_945.match_iter(self._Node_ReceivedEvent_1, _BoundPattern955_=p)):
                            return False
                    return True
                _st_label_931 = 0
                while (_st_label_931 == 0):
                    _st_label_931 += 1
                    if UniversalOpExpr_932():
                        _st_label_931 += 1
                    else:
                        super()._label('_st_label_931', block=True)
                        _st_label_931 -= 1
                else:
                    if (_st_label_931 != 2):
                        continue
                if (_st_label_931 != 2):
                    break
                self.send(('done',), to=ps)
        for i in range(nrepetitions):
            print('---------------------------------------------------------------')
            print(('nrepetations: %d nparameter: %d Spec.da' % ((i + 1), nparameter)))
            sreq = (nrequests // nparameter)
            print('---------------------------------------------------------------')
            print('Varying Requests')
            print('---------------------------------------------------------------')
            for nreq in range(sreq, (nrequests + 1), sreq):
                testp2 = self.new(TP2, num=1)
                ps = self.new(spec.P, num=nprocs)
                self._setup(testp2, (ps, nprocs, nreq))
                self._start(testp2)
                for p in ps:
                    self._setup(p, (testp2, (ps - {p}), nreq))
                self._start(ps)
                super()._label('_st_label_1048', block=False)
                p = None

                def UniversalOpExpr_1049():
                    nonlocal p
                    for p in ps:
                        if (not PatternExpr_1062.match_iter(self._Node_ReceivedEvent_2, _BoundPattern1072_=p)):
                            return False
                    return True
                _st_label_1048 = 0
                while (_st_label_1048 == 0):
                    _st_label_1048 += 1
                    if UniversalOpExpr_1049():
                        _st_label_1048 += 1
                    else:
                        super()._label('_st_label_1048', block=True)
                        _st_label_1048 -= 1
                else:
                    if (_st_label_1048 != 2):
                        continue
                if (_st_label_1048 != 2):
                    break
                self.send(('done',), to=ps)
            sproc = (nprocs // nparameter)
            print('---------------------------------------------------------------')
            print('Varying Process')
            print('---------------------------------------------------------------')
            for nproc in range(sproc, (nprocs + 1), sproc):
                testp2 = self.new(TP2, num=1)
                ps = self.new(spec.P, num=nproc)
                self._setup(testp2, (ps, nproc, nrequests))
                self._start(testp2)
                for p in ps:
                    self._setup(p, (testp2, (ps - {p}), nreq))
                self._start(ps)
                super()._label('_st_label_1144', block=False)
                p = None

                def UniversalOpExpr_1145():
                    nonlocal p
                    for p in ps:
                        if (not PatternExpr_1158.match_iter(self._Node_ReceivedEvent_3, _BoundPattern1168_=p)):
                            return False
                    return True
                _st_label_1144 = 0
                while (_st_label_1144 == 0):
                    _st_label_1144 += 1
                    if UniversalOpExpr_1145():
                        _st_label_1144 += 1
                    else:
                        super()._label('_st_label_1144', block=True)
                        _st_label_1144 -= 1
                else:
                    if (_st_label_1144 != 2):
                        continue
                if (_st_label_1144 != 2):
                    break
                self.send(('done',), to=ps)
        for i in range(nrepetitions):
            print('---------------------------------------------------------------')
            print(('nrepetations: %d nparameter: %d Q1.da' % ((i + 1), nparameter)))
            sreq = (nrequests // nparameter)
            print('---------------------------------------------------------------')
            print('Varying Requests')
            print('---------------------------------------------------------------')
            for nreq in range(sreq, (nrequests + 1), sreq):
                testp3 = self.new(TP3, num=1)
                ps = self.new(q1.P, num=nprocs)
                self._setup(testp3, (ps, nprocs, nreq))
                self._start(testp3)
                for p in ps:
                    self._setup(p, (testp3, (ps - {p}), nreq))
                self._start(ps)
                super()._label('_st_label_1261', block=False)
                p = None

                def UniversalOpExpr_1262():
                    nonlocal p
                    for p in ps:
                        if (not PatternExpr_1275.match_iter(self._Node_ReceivedEvent_4, _BoundPattern1285_=p)):
                            return False
                    return True
                _st_label_1261 = 0
                while (_st_label_1261 == 0):
                    _st_label_1261 += 1
                    if UniversalOpExpr_1262():
                        _st_label_1261 += 1
                    else:
                        super()._label('_st_label_1261', block=True)
                        _st_label_1261 -= 1
                else:
                    if (_st_label_1261 != 2):
                        continue
                if (_st_label_1261 != 2):
                    break
                self.send(('done',), to=ps)
            sproc = (nprocs // nparameter)
            print('---------------------------------------------------------------')
            print('Varying Process')
            print('---------------------------------------------------------------')
            for nproc in range(sproc, (nprocs + 1), sproc):
                testp3 = self.new(TP3, num=1)
                ps = self.new(q1.P, num=nproc)
                self._setup(testp3, (ps, nproc, nrequests))
                self._start(testp3)
                for p in ps:
                    self._setup(p, (testp3, (ps - {p}), nreq))
                self._start(ps)
                super()._label('_st_label_1357', block=False)
                p = None

                def UniversalOpExpr_1358():
                    nonlocal p
                    for p in ps:
                        if (not PatternExpr_1371.match_iter(self._Node_ReceivedEvent_5, _BoundPattern1381_=p)):
                            return False
                    return True
                _st_label_1357 = 0
                while (_st_label_1357 == 0):
                    _st_label_1357 += 1
                    if UniversalOpExpr_1358():
                        _st_label_1357 += 1
                    else:
                        super()._label('_st_label_1357', block=True)
                        _st_label_1357 -= 1
                else:
                    if (_st_label_1357 != 2):
                        continue
                if (_st_label_1357 != 2):
                    break
                self.send(('done',), to=ps)
